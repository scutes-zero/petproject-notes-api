// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notes

import (
	"notes-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockNoteCreator creates a new instance of MockNoteCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoteCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoteCreator {
	mock := &MockNoteCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNoteCreator is an autogenerated mock type for the NoteCreator type
type MockNoteCreator struct {
	mock.Mock
}

type MockNoteCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoteCreator) EXPECT() *MockNoteCreator_Expecter {
	return &MockNoteCreator_Expecter{mock: &_m.Mock}
}

// CreateNote provides a mock function for the type MockNoteCreator
func (_mock *MockNoteCreator) CreateNote(userID int, title string, content string) (int64, error) {
	ret := _mock.Called(userID, title, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateNote")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string) (int64, error)); ok {
		return returnFunc(userID, title, content)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string, string) int64); ok {
		r0 = returnFunc(userID, title, content)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = returnFunc(userID, title, content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNoteCreator_CreateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNote'
type MockNoteCreator_CreateNote_Call struct {
	*mock.Call
}

// CreateNote is a helper method to define mock.On call
//   - userID int
//   - title string
//   - content string
func (_e *MockNoteCreator_Expecter) CreateNote(userID interface{}, title interface{}, content interface{}) *MockNoteCreator_CreateNote_Call {
	return &MockNoteCreator_CreateNote_Call{Call: _e.mock.On("CreateNote", userID, title, content)}
}

func (_c *MockNoteCreator_CreateNote_Call) Run(run func(userID int, title string, content string)) *MockNoteCreator_CreateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNoteCreator_CreateNote_Call) Return(n int64, err error) *MockNoteCreator_CreateNote_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockNoteCreator_CreateNote_Call) RunAndReturn(run func(userID int, title string, content string) (int64, error)) *MockNoteCreator_CreateNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoteDeleter creates a new instance of MockNoteDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoteDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoteDeleter {
	mock := &MockNoteDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNoteDeleter is an autogenerated mock type for the NoteDeleter type
type MockNoteDeleter struct {
	mock.Mock
}

type MockNoteDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoteDeleter) EXPECT() *MockNoteDeleter_Expecter {
	return &MockNoteDeleter_Expecter{mock: &_m.Mock}
}

// DeleteNote provides a mock function for the type MockNoteDeleter
func (_mock *MockNoteDeleter) DeleteNote(id int, userID int) error {
	ret := _mock.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = returnFunc(id, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNoteDeleter_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type MockNoteDeleter_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - id int
//   - userID int
func (_e *MockNoteDeleter_Expecter) DeleteNote(id interface{}, userID interface{}) *MockNoteDeleter_DeleteNote_Call {
	return &MockNoteDeleter_DeleteNote_Call{Call: _e.mock.On("DeleteNote", id, userID)}
}

func (_c *MockNoteDeleter_DeleteNote_Call) Run(run func(id int, userID int)) *MockNoteDeleter_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNoteDeleter_DeleteNote_Call) Return(err error) *MockNoteDeleter_DeleteNote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNoteDeleter_DeleteNote_Call) RunAndReturn(run func(id int, userID int) error) *MockNoteDeleter_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoteProvider creates a new instance of MockNoteProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoteProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoteProvider {
	mock := &MockNoteProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNoteProvider is an autogenerated mock type for the NoteProvider type
type MockNoteProvider struct {
	mock.Mock
}

type MockNoteProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoteProvider) EXPECT() *MockNoteProvider_Expecter {
	return &MockNoteProvider_Expecter{mock: &_m.Mock}
}

// Note provides a mock function for the type MockNoteProvider
func (_mock *MockNoteProvider) Note(id int, userID int) (*models.Note, error) {
	ret := _mock.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Note")
	}

	var r0 *models.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) (*models.Note, error)); ok {
		return returnFunc(id, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) *models.Note); ok {
		r0 = returnFunc(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(id, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNoteProvider_Note_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Note'
type MockNoteProvider_Note_Call struct {
	*mock.Call
}

// Note is a helper method to define mock.On call
//   - id int
//   - userID int
func (_e *MockNoteProvider_Expecter) Note(id interface{}, userID interface{}) *MockNoteProvider_Note_Call {
	return &MockNoteProvider_Note_Call{Call: _e.mock.On("Note", id, userID)}
}

func (_c *MockNoteProvider_Note_Call) Run(run func(id int, userID int)) *MockNoteProvider_Note_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNoteProvider_Note_Call) Return(note *models.Note, err error) *MockNoteProvider_Note_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNoteProvider_Note_Call) RunAndReturn(run func(id int, userID int) (*models.Note, error)) *MockNoteProvider_Note_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotesProvider creates a new instance of MockNotesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesProvider {
	mock := &MockNotesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotesProvider is an autogenerated mock type for the NotesProvider type
type MockNotesProvider struct {
	mock.Mock
}

type MockNotesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesProvider) EXPECT() *MockNotesProvider_Expecter {
	return &MockNotesProvider_Expecter{mock: &_m.Mock}
}

// Notes provides a mock function for the type MockNotesProvider
func (_mock *MockNotesProvider) Notes(userID int) ([]models.Note, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Notes")
	}

	var r0 []models.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]models.Note, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []models.Note); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesProvider_Notes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notes'
type MockNotesProvider_Notes_Call struct {
	*mock.Call
}

// Notes is a helper method to define mock.On call
//   - userID int
func (_e *MockNotesProvider_Expecter) Notes(userID interface{}) *MockNotesProvider_Notes_Call {
	return &MockNotesProvider_Notes_Call{Call: _e.mock.On("Notes", userID)}
}

func (_c *MockNotesProvider_Notes_Call) Run(run func(userID int)) *MockNotesProvider_Notes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesProvider_Notes_Call) Return(notes []models.Note, err error) *MockNotesProvider_Notes_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockNotesProvider_Notes_Call) RunAndReturn(run func(userID int) ([]models.Note, error)) *MockNotesProvider_Notes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoteUpdater creates a new instance of MockNoteUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoteUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoteUpdater {
	mock := &MockNoteUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNoteUpdater is an autogenerated mock type for the NoteUpdater type
type MockNoteUpdater struct {
	mock.Mock
}

type MockNoteUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoteUpdater) EXPECT() *MockNoteUpdater_Expecter {
	return &MockNoteUpdater_Expecter{mock: &_m.Mock}
}

// UpdateNote provides a mock function for the type MockNoteUpdater
func (_mock *MockNoteUpdater) UpdateNote(id int, userID int, title string, content string) error {
	ret := _mock.Called(id, userID, title, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, int, string, string) error); ok {
		r0 = returnFunc(id, userID, title, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNoteUpdater_UpdateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNote'
type MockNoteUpdater_UpdateNote_Call struct {
	*mock.Call
}

// UpdateNote is a helper method to define mock.On call
//   - id int
//   - userID int
//   - title string
//   - content string
func (_e *MockNoteUpdater_Expecter) UpdateNote(id interface{}, userID interface{}, title interface{}, content interface{}) *MockNoteUpdater_UpdateNote_Call {
	return &MockNoteUpdater_UpdateNote_Call{Call: _e.mock.On("UpdateNote", id, userID, title, content)}
}

func (_c *MockNoteUpdater_UpdateNote_Call) Run(run func(id int, userID int, title string, content string)) *MockNoteUpdater_UpdateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockNoteUpdater_UpdateNote_Call) Return(err error) *MockNoteUpdater_UpdateNote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNoteUpdater_UpdateNote_Call) RunAndReturn(run func(id int, userID int, title string, content string) error) *MockNoteUpdater_UpdateNote_Call {
	_c.Call.Return(run)
	return _c
}
